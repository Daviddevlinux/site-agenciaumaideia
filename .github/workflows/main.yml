name: Frontend - Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: meu-front
      IMAGE_TAG: ${{ github.sha }}
      REGISTRY: docker.io
      DOCKERHUB_USER: ${{ secrets.REGISTRY_USERNAME }}

    steps:
      - name: Checkout
        # v4 é a mais recente da action oficial
        uses: actions/checkout@v4

      - name: Login no Docker Hub (CI)
        run: echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login $REGISTRY -u "$DOCKERHUB_USER" --password-stdin

      - name: Build da imagem
        run: docker build -t $REGISTRY/$DOCKERHUB_USER/$IMAGE_NAME:$IMAGE_TAG .

      - name: Push da imagem
        run: docker push $REGISTRY/$DOCKERHUB_USER/$IMAGE_NAME:$IMAGE_TAG

      - name: Deploy na droplet via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }} # ex.: 161.35.xx.yy
          username: ${{ secrets.SERVER_USER }} # ex.: root ou deploy
          key: ${{ secrets.SERVER_SSH_KEY }} # chave privada correspondente
          # Se sua chave tiver passphrase, descomente a linha abaixo e crie o secret:
          # passphrase: ${{ secrets.SERVER_SSH_PASSPHRASE }}
          script_stop: true
          script: |
            set -e

            # 1) Login no Docker Hub dentro da droplet (necessário para pull)
            echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login docker.io -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin

            # 2) Puxa a imagem recém-buildada
            docker pull docker.io/${{ secrets.REGISTRY_USERNAME }}/meu-front:${{ github.sha }}

            # 3) Sobe container novo (mata o antigo se existir)
            docker stop meu-front || true
            docker rm meu-front || true
            docker run -d --name meu-front -p 80:80 docker.io/${{ secrets.REGISTRY_USERNAME }}/meu-front:${{ github.sha }}

            # 4) Limpa camadas antigas
            docker image prune -f
